#!/bin/bash
# set -x
# Author: Adam Richards
####################################
# get script directory
SWD=$(dirname ${0})
IFS_ORIG=$IFS
###################################
# load support files
source "${SWD}/../config/orcl_config"
source "${SWD}/../lib/orcl_lib"
####################################
# define usage function
usage()
{
cat << EOF
usage: $(basename $0) options
Author: Adam Richards
Reset passwords and unlock.
Based on a password file.

OPTIONS:
-h        help
-m value  host
-s value  sid
-u value  username
-f        pwfile
-a        reset all 
-v        verbose
EOF
}
####################################
# initialize argument variables
HOST=
SID=
UNAME=
A=0
V=0
PWFILE=
####################################
# process command line arguments
# options with : after them expect an argument
while getopts “hm:s:u:f:av” OPTION
do
     case $OPTION in
	 h)
	     usage
	     exit 1
	     ;;
	 m)
	     HOST=$OPTARG
	     ;;
	 u)
	     UNAME=$OPTARG
	     ;;
	 s)
	     SID=$OPTARG
	     ;;
	 f)
	     PWFILE=$OPTARG
	     ;;
	 a)
	     A=1
	     ;;
	 v)
	     V=1
	     ;;
	 ?)
	     usage
	     exit
	     ;;
     esac
done
####################################
# validate arguments
# minimus HOST or A (for all )
if [[ -z $HOST ]] && [[ $A -eq 0 ]];then
     usage
     exit 1
fi

# pwfile required and valid
if [[ -z $PWFILE ]] ;then
	usage
	exit 1
else
	if [[ ! -f "${PWFILE}" ]]; then
	    printf "File not found: %s\n" "${PWFILE}"
	    exit 1
	fi
fi


# ssh
assertIdentityFile
####################################
# generate unique timestamp
TS=$(timestampstring)
####################################
FINAL="/tmp/orcl_sql_report___TS__.txt"
FINAL="${FINAL/__TS__/$TS}"
TFILE="/tmp/tmp___TS__.txt"
TFILE="${TFILE/__TS__/$TS}"
TFILE2="/tmp/tmp2___TS__.txt"
TFILE2="${TFILE2/__TS__/$TS}"
########################################################################
function resetPW()
{
read -r -d '' SQL <<'EOT'
alter user ${USERNAME} identified by "${PW}" account unlock
;

EOT
# substitue
TSQL=$(echo "${SQL}" | perl -p -e "s/\\$\{USERNAME\}/${3}/g")
TSQL=$(echo "${TSQL}" | perl -p -e "s/\\$\{PW\}/${4}/g")
# run it
printf "%s\n" "${TSQL}" | ssh -T -q -i "${ORCL_SSHIDFILE}" -t "${ORCL_SSHUSER}"@$1 "export ORACLE_SID=$2;export ORAENV_ASK=NO;. oraenv >/dev/null;sqlplus -S '/ as sysdba' " >  ${TFILE} 

printf "Reset password: %s %s %s \n" "${1}" "${2}" "${3}" >> ${FINAL}
# check for errors
grep -q -i -e "^ORA-\|^SP2-" "${TFILE}"
OK=$?
if [[ $OK -eq 0 ]]; then
printf ">> %s %s:\n" "${1}" "${2}" 
grep -i -e "^ORA-\|^SP2-" "${TFILE}"
printf "Failed\n" >> ${FINAL}
else
cat ${TFILE} >> ${FINAL}
fi
}
########################################################################
function processRequest()
{
OP="${1}"
case "${OP}" in
"list")
;;
"execute")
;;
*)
printf "Invalid op \"%s\".\n" "${OP}"
OK=1
return 1
;;
esac

IFS=$'\r\n' RECORDS_ARRAY=($(cat "${PWFILE}"))

if [[ "${OP}" = "list" ]]; then
	printf "The following operations match selected criteria.\n"
fi
for RECORD in "${RECORDS_ARRAY[@]}" ; do
#ignore comment lines
COMMENT_REGEX='^\s*#'
if [[ ${RECORD} =~ $COMMENT_REGEX ]]; then
continue
fi
IFS='|' read -ra RECORD_ARRAY <<< "${RECORD}"
H=$(printf "%s" "${RECORD}" | cut -d'|' -f1 )
S=$(printf "%s" "${RECORD}" | cut -d'|' -f2 )
UN=$(printf "%s" "${RECORD}" | cut -d'|' -f3 )
PW=$(printf "%s" "${RECORD}" | cut -d'|' -f4 )
# 
H=$(printf "%s" "${H}" | sed -e 's/^ *//' -e 's/ *$//')
S=$(printf "%s" "${S}" | sed -e 's/^ *//' -e 's/ *$//')
UN=$(printf "%s" "${UN}" | sed -e 's/^ *//' -e 's/ *$//')
PW=$(printf "%s" "${PW}" | sed -e 's/^ *//' -e 's/ *$//')
# if processin ALL
if [[ $A -eq 1 ]]; then
	if [[ "${OP}" = "list" ]]; then
		printf "match: %s %s %s \n" "${H}" "${S}" "${UN}" 
	fi
	if [[ "${OP}" = "execute" ]]; then
	resetPW "${H}" "${S}" "${UN}" "${PW}"
	fi
else
	if [[ ! -z $HOST ]] && [[ -z $SID ]] && [[ -z $UNAME ]] && [[ $A -eq 0 ]] ; then
		if [[ "${HOST}" = "${H}" ]]; then
			if [[ "${OP}" = "list" ]]; then
				printf "match: %s %s %s \n" "${H}" "${S}" "${UN}" 
			fi
			if [[ "${OP}" = "execute" ]]; then
				printf "Processing %s %s %s \n" "${H}" "${S}" "${UN}" 
				resetPW "${H}" "${S}" "${UN}" "${PW}"
			fi
		fi
	fi
	if [[ ! -z $HOST ]] && [[ ! -z $SID ]] && [[ -z $UNAME ]] && [[ $A -eq 0 ]] ; then
		if [[ "${HOST}" = "${H}" ]] && [[ "${SID}" = "${S}" ]]; then
			if [[ "${OP}" = "list" ]]; then
				printf "match: %s %s %s \n" "${H}" "${S}" "${UN}" 
			fi
			if [[ "${OP}" = "execute" ]]; then
				printf "Processing %s %s %s \n" "${H}" "${S}" "${UN}" 
				resetPW "${H}" "${S}" "${UN}" "${PW}"
			fi
		fi
	fi
	if [[ ! -z $HOST ]] && [[ ! -z $SID ]] && [[ ! -z $UNAME ]] && [[ $A -eq 0 ]] ; then
		if [[ "${HOST}" = "${H}" ]] && [[ "${SID}" = "${S}" ]] && [[ "${UNAME}" = "${UN}" ]]; then
			if [[ "${OP}" = "list" ]]; then
				printf "match: %s %s %s \n" "${H}" "${S}" "${UN}" 
			fi
			if [[ "${OP}" = "execute" ]]; then
				printf "Processing %s %s %s \n" "${H}" "${S}" "${UN}" 
				resetPW "${H}" "${S}" "${UN}" "${PW}"
			fi
		fi
	fi
fi
done
}
IFS=$IFS_ORIG
########################################################################
processRequest "list"
if [[ $OK -ne 0 ]]; then
	exit 1
fi
read -p "Execute update? Enter "yes" to proceed, return to abort: " r 
if [[ "${r}" = "yes" ]]; then
	processRequest "execute"
else
	printf "\nUser aborted operation.\n"
	exit 1
fi
####################################
# cleanup and display output of all steps
if [[ -f "${FINAL}" ]]; then
cp ${FINAL} ${TFILE2}
cat ${TFILE2} | perl -e 'while (<>) {$_=~s/[ \t]+$//g;print;}' > $FINAL
cat ${FINAL}
fi
####################################
# cleanup
rm /tmp/*${TS}* 2> /dev/null
exit 0
########################################################################
