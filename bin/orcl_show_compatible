#!/bin/bash
# set -x
####################################
# get script directory
SWD=$(dirname ${0})
###################################
# load support files
source "${SWD}/../config/orcl_config"
source "${SWD}/../lib/orcl_lib"
####################################
# define usage function
usage()
{
cat << EOF
usage: $(basename $0) options
Author: Adam Richards
Run an sql file on multile hosts and sids

OPTIONS:
-h        help
-m value  host|hostfile
-s value  sid (optional)
-v        verbose
EOF
}

####################################
# initialize argument variables
HOSTFILE=
SID=0
V=
####################################
# process command line arguments
# options with : after them expect an argument
while getopts “hm:s:v” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         m)
             HOSTFILE=$OPTARG
             ;;
         s)
             SID=$OPTARG
             ;;
         v)
             ;;
         v)
             V=1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done
####################################
# validate arguments
if [[ -z $HOSTFILE ]]
then
     usage
     exit 1
fi

####################################
# check for idenfity file
if [[ -z $IDFILE ]]; then
    printf "Identity File environment variable IDFILE not defined"
    exit 1
fi
if [[ ! -f "${IDFILE}" ]]; then
    printf "Identity File not found: %s\n" "${IDFILE}"
    exit 1
fi
####################################
# generate unique timestamp
TS=$(date +%s)
####################################
FINAL="/tmp/orcl_sql_report___TS__.txt"
FINAL="${FINAL/__TS__/$TS}"
TFILE="/tmp/tmp___TS__.txt"
TFILE="${TFILE/__TS__/$TS}"
TFILE2="/tmp/tmp2___TS__.txt"
TFILE2="${TFILE2/__TS__/$TS}"
####################################

read -r -d '' SQL <<'EOF'
SET NEWPAGE 0
SET COLSEP '|'
SET SPACE 0
SET LINESIZE 9999
SET PAGESIZE 0
SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
SET HEADING OFF
SET MARKUP HTML OFF SPOOL OFF
COL VALUE format a10
COL NAME format a15
SELECT CAST(SYS_CONTEXT('USERENV','SERVER_HOST') as VARCHAR2(20)) as "HOST", CAST(SYS_CONTEXT('USERENV','INSTANCE') as VARCHAR2(4)) as "INST", CAST(SYS_CONTEXT('USERENV','DB_NAME') as VARCHAR2(10)) as "SID",
name, value FROM v$parameter
         WHERE name = 'compatible';
exit
EOF
read -r -d '' SQLASM <<'EOF'
SET NEWPAGE 0
SET COLSEP '|'
SET SPACE 0
SET LINESIZE 9999
SET PAGESIZE 0
SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
SET HEADING OFF
SET MARKUP HTML OFF SPOOL OFF
COL compatibility format a15
COL database_compatibility format a15
COL NAME format a15
SELECT CAST(SYS_CONTEXT('USERENV','SERVER_HOST') as VARCHAR2(20)) as "HOST", CAST(SYS_CONTEXT('USERENV','INSTANCE') as VARCHAR2(4)) as "INST", CAST(SYS_CONTEXT('USERENV','DB_NAME') as VARCHAR2(10)) as "SID",group_number, trim(name) as name , compatibility, database_compatibility FROM v$asm_diskgroup;
exit
EOF

if [[ -f "${HOSTFILE}" ]]; then
HOSTLIST=$(collectHostsFromFile "${HOSTFILE}")
else
HOSTLIST="${HOSTFILE}"
fi

for HOST in ${HOSTLIST}; do
if [[ $SID = 0 ]]; then
SIDLIST=$(orcl_getsids_asm $HOST)
else
SIDLIST="$SID"
fi
echo "${HOST}- SIDS: ${SIDLIST}"

for w in ${SIDLIST}; do 
# check if asm instance
M=$(echo "${w}" | perl -n -e "print if (m/^\+ASM/ig);")
if [[ -z $M ]]; then
TSQL="${SQL}"
else
TSQL="${SQLASM}"
fi
printf "%s\n" "${TSQL}" | ssh -q -i "${IDFILE}" -t oracle@$HOST "export ORACLE_SID=$w;export ORAENV_ASK=NO;. oraenv >/dev/null;sqlplus -S '/ as sysdba' " >  ${TFILE} 

grep -q -i -e "^ORA-" "${TFILE}"
OK=$?
if [[ $OK -eq 0 ]]; then
echo "$HOST $w Failed" >> ${FINAL}
echo "    Query Failed: $HOST $w"
grep  -i -e "^ORA-" "${TFILE}"
else
cat ${TFILE} >> ${FINAL}
fi
done

done

cp ${FINAL} ${TFILE2}
cat ${TFILE2} | perl -e 'while (<>) {$_=~s/[ \t]+$//g;print;}' > $FINAL
cat ${FINAL}
# cleanup
rm ${TFILE} ${TFILE2}
exit 0
##############################################
