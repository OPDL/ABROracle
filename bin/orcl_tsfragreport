#!/bin/bash
# set -x
###############################################
# get script directory
SWD=$(dirname ${0})
###############################################
# load support files
source "${SWD}/../config/orcl_config"
source "${SWD}/../lib/orcl_lib"
###############################################
# define usage function
usage()
{
cat << EOF
usage: $(basename $0) options
Author: Adam Richards
Check tablespaces for fragmentation.

OPTIONS:
-h        help
-m value  host|hostfile
-s value  sid (optional)
-v        verbose
EOF
}
###############################################
# initialize argument variables
HOSTFILE=
SID=0
V=
####################################
# process command line arguments
# options with : after them expect an argument
while getopts “hm:f:s:v” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         m)
             HOSTFILE=$OPTARG
             ;;
         s)
             SID=$OPTARG
             ;;
         v)
             V=1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done
####################################
# validate arguments
if [[ -z $HOSTFILE ]]
then
     usage
     exit 1
fi
####################################
assertIdentityFile
####################################
# generate unique timestamp
TS=$(date +%s)
###############################################
# Generate variable with sql command
read -r -d '' SQLT <<'EOF'
SET ECHO OFF
set pagesize 9999
set linesize 9999
set feedback off
set verify off 

SPOOL __REPORTFILE__
define m_tablespace = '__TSNAME__'
 
select
    file_id,
    block_id,
    block_id + blocks - 1   end_block,
    owner,
    segment_name,
    partition_name,
    segment_type
from
    dba_extents
where
    tablespace_name = '&m_tablespace'
union all
select
    file_id,
    block_id,
    block_id + blocks - 1   end_block,
    'free'          owner,
    'free'          segment_name,
    null            partition_name,
    null            segment_type
from
    dba_free_space
where
    tablespace_name = '&m_tablespace'
order by
    1,2;

SPOOL OFF
SET ECHO ON
exit
EOF
####################################
REPORTFILET="/tmp/sql_report___SID_____TS__.txt"
SQLFILET="/tmp/sql_report___SID_____TS__.sql"
FINAL="/tmp/orcl_sql_report___TS__.txt"
FINAL="${FINAL/__TS__/$TS}"
FLIST=""

for h in ${HSOURCE}; do
if [[ $SIDNAME = '' ]]; then
echo "Collecting SIDs from host $h"
SIDS=$(ssh -q -i "${IDFILe}" -t oracle@$h "cat /etc/oratab | egrep -iv '^#|agent' | cut -s -d: -f1 | sort | tr '\r\n' ' '")
else
SIDS=$SIDNAME
fi

for s in ${SIDS}; do 
REPORTFILE="${REPORTFILET/__SID__/$s}"
REPORTFILE="${REPORTFILE/__TS__/$TS}"
SQLFILE="${SQLFILET/__SID__/$s}"
SQLFILE="${SQLFILE/__TS__/$TS}"
SQL="${SQLT/__REPORTFILE__/$REPORTFILE}"
SQL="${SQL/__TSNAME__/$TSNAME}"
FLIST="${FLIST} ${REPORTFILE}"


# save sql to local sql file
echo "$SQL" > "$SQLFILE"
# send sql file to remote server
scp -q -i "${IDFILE}" "$SQLFILE" oracle@$h:"$SQLFILE"
# run the sql
echo "Running query on host $h SID $s"
ssh -q -i identity/id_rsa -t oracle@$h "export ORACLE_SID=$s;export ORAENV_ASK=NO;. oraenv;sqlplus '/ as sysdba' @$SQLFILE" 1> /dev/null
# get the results
scp -q -i identity/id_rsa oracle@$h:"$REPORTFILE" "$REPORTFILE"

#Cleanup?

done
done
cat ${FLIST} | perl -e 'while (<>) {$_=~s/[ \t]+$//g;print;}' > $FINAL
cat $FINAL

exit 0
