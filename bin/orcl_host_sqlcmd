#!/bin/bash
# set -x
####################################
# define usage function
usage()
{
cat << EOF
usage: $(basename $0) options
Author: Adam Richards
Run an sql file on multile hosts and sids

OPTIONS:
-h        help
-m value  host
-s value  sid (optional)
-f value  sqlfile
-v        verbose
EOF
}

####################################
# initialize argument variables
HOSTFILE=
SQLFILE=
SID=0
V=
####################################
# process command line arguments
# options with : after them expect an argument
while getopts “hm:f:s:v” OPTION
do
     case $OPTION in
	 h)
	     usage
	     exit 1
	     ;;
	 m)
	     HOST=$OPTARG
	     ;;
	 f)
	     SQLFILE=$OPTARG
	     ;;
	 s)
	     SID=$OPTARG
	     ;;
	 v)
	     V=1
	     ;;
	 ?)
	     usage
	     exit
	     ;;
     esac
done
####################################
# change working directory to that of the
# running script
cd $(dirname ${0})
# load library files
source lib/orcl_lib
####################################
# validate arguments
if [[ -z $HOST ]] 
then
     usage
     exit 1
fi

if [[ -z $SQLFILE ]] 
then
     usage
     exit 1
fi

if [[ ! -f "${SQLFILE}" ]]; then
    print "File not found: %s\n" "${SQLFILE}"
    exit 1
fi

####################################
# generate unique timestamp
TS=$(date +%s)
####################################
FINAL="/tmp/orcl_sql_report___TS__.txt"
FINAL="${FINAL/__TS__/$TS}"
TFILE="/tmp/tmp___TS__.txt"
TFILE="${TFILE/__TS__/$TS}"
TFILE2="/tmp/tmp2___TS__.txt"
TFILE2="${TFILE2/__TS__/$TS}"
####################################
HOSTLIST="${HOST}"

for HOST in ${HOSTLIST}; do
if [[ $SID = 0 ]]; then
SIDLIST=$(orcl_getsids $HOST)
else
# user specified a single sid
SIDLIST="$SID"
fi


for w in ${SIDLIST}; do 
if [[ $V = 1 ]]; then
printf ">> %s %s:\n" "${HOST}" "${w}" 
fi
printf ">> %s %s:\n" "${HOST}" "${w}" > "${TFILE}"
cat "${SQLFILE}" | ssh -q -i identity/id_rsa -t oracle@$HOST "export ORACLE_SID=$w;export ORAENV_ASK=NO;. oraenv >/dev/null;sqlplus -S '/ as sysdba' " >>  ${TFILE} 

# check for errors
grep -q -i -e "^ORA-" "${TFILE}"
OK=$?
if [[ $OK -eq 0 ]]; then
printf ">> %s %s:\n" "${HOST}" "${w}" 
grep -i -e "^ORA-" "${TFILE}"
echo "$HOST $w Query Failed" >> ${FINAL}
else
cat ${TFILE} >> ${FINAL}
fi
done

done

cp ${FINAL} ${TFILE2}
cat ${TFILE2} | perl -e 'while (<>) {$_=~s/[ \t]+$//g;print;}' > $FINAL
cat ${FINAL}
# cleanup
rm /tmp/*${TS}*
exit 0
##############################################
